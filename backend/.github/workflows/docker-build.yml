name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.yml'

env:
  DOCKER_IMAGE: smartlegalassistance/backend
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Ensure settings __init__.py is properly configured
      run: |
        if [ -z "$(cat config/settings/__init__.py)" ]; then
          echo "Fixing empty settings/__init__.py file"
          echo 'import os' > config/settings/__init__.py
          echo '# Default to production settings, can be overridden by DJANGO_SETTINGS_MODULE env var' >> config/settings/__init__.py
          echo 'from .production import *' >> config/settings/__init__.py
        fi
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
        
    - name: Run tests
      run: |
        docker run --rm ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} python manage.py test
        
    - name: Update deployment
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }} 