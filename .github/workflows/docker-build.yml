name: Build and Push Backend Docker Images

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**/*.py'
      - 'backend/requirements.txt'
      - 'backend/**/Dockerfile'
      - 'backend/docker-compose.yml'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**/*.py'
      - 'backend/requirements.txt'
      - 'backend/**/Dockerfile'
      - 'backend/docker-compose.yml'

env:
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Get Docker credentials
      id: docker-creds
      run: |
        if [ -f .github/config/docker-credentials.txt ]; then
          # Read credentials from the file
          DOCKERHUB_USERNAME=$(grep "username=" .github/config/docker-credentials.txt | cut -d= -f2)
          DOCKERHUB_TOKEN=$(grep "token=" .github/config/docker-credentials.txt | cut -d= -f2)
          
          # Save as outputs
          echo "::set-output name=username::$DOCKERHUB_USERNAME"
          echo "::set-output name=token::$DOCKERHUB_TOKEN"
        else
          echo "Credentials file not found. Please create .github/config/docker-credentials.txt"
          exit 1
        fi
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ steps.docker-creds.outputs.username }}
        password: ${{ steps.docker-creds.outputs.token }}
    
    - name: Build and Push API Gateway
      uses: docker/build-push-action@v4
      with:
        context: ./backend/api-gateway
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          smartlegalassistance/api-gateway:${{ env.DOCKER_TAG }}
          smartlegalassistance/api-gateway:latest
        cache-from: type=registry,ref=smartlegalassistance/api-gateway:buildcache
        cache-to: type=registry,ref=smartlegalassistance/api-gateway:buildcache,mode=max
        
    - name: Build and Push Auth Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/auth-service
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          smartlegalassistance/auth-service:${{ env.DOCKER_TAG }}
          smartlegalassistance/auth-service:latest
        cache-from: type=registry,ref=smartlegalassistance/auth-service:buildcache
        cache-to: type=registry,ref=smartlegalassistance/auth-service:buildcache,mode=max
        
    - name: Build and Push Attorney Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/attorney-service
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          smartlegalassistance/attorney-service:${{ env.DOCKER_TAG }}
          smartlegalassistance/attorney-service:latest
        cache-from: type=registry,ref=smartlegalassistance/attorney-service:buildcache
        cache-to: type=registry,ref=smartlegalassistance/attorney-service:buildcache,mode=max
        
    - name: Build and Push Client Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/client-service
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          smartlegalassistance/client-service:${{ env.DOCKER_TAG }}
          smartlegalassistance/client-service:latest
        cache-from: type=registry,ref=smartlegalassistance/client-service:buildcache
        cache-to: type=registry,ref=smartlegalassistance/client-service:buildcache,mode=max
        
    - name: Build and Push Document Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/document-service
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          smartlegalassistance/document-service:${{ env.DOCKER_TAG }}
          smartlegalassistance/document-service:latest
        cache-from: type=registry,ref=smartlegalassistance/document-service:buildcache
        cache-to: type=registry,ref=smartlegalassistance/document-service:buildcache,mode=max
        
    - name: Run backend tests
      run: |
        cd backend
        docker-compose -f docker-compose.yml run api-gateway python manage.py test
        
    - name: Update deployment
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }} 